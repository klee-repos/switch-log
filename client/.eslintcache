[{"/Users/kevinlee/dev/switch-log/client/src/index.js":"1","/Users/kevinlee/dev/switch-log/client/src/context/UserContext.js":"2","/Users/kevinlee/dev/switch-log/client/src/context/UserStore.js":"3","/Users/kevinlee/dev/switch-log/client/src/routes.js":"4","/Users/kevinlee/dev/switch-log/client/src/containers/RouteContainer.js":"5","/Users/kevinlee/dev/switch-log/client/src/containers/Auth.js":"6","/Users/kevinlee/dev/switch-log/client/src/containers/Home.js":"7","/Users/kevinlee/dev/switch-log/client/src/containers/Navbar.js":"8","/Users/kevinlee/dev/switch-log/client/src/containers/Logs.js":"9","/Users/kevinlee/dev/switch-log/client/src/containers/Login.js":"10","/Users/kevinlee/dev/switch-log/client/src/containers/Loading.js":"11","/Users/kevinlee/dev/switch-log/client/src/setupProxy.js":"12","/Users/kevinlee/dev/switch-log/client/src/api/Insight.js":"13","/Users/kevinlee/dev/switch-log/client/src/containers/LifeDesignSummary.js":"14"},{"size":321,"mtime":1609366311334,"results":"15","hashOfConfig":"16"},{"size":431,"mtime":1609271228470,"results":"17","hashOfConfig":"16"},{"size":900,"mtime":1610313249057,"results":"18","hashOfConfig":"16"},{"size":514,"mtime":1610314041057,"results":"19","hashOfConfig":"16"},{"size":210,"mtime":1609272890601,"results":"20","hashOfConfig":"16"},{"size":1138,"mtime":1610305595108,"results":"21","hashOfConfig":"16"},{"size":525,"mtime":1610314024780,"results":"22","hashOfConfig":"16"},{"size":1312,"mtime":1610314177924,"results":"23","hashOfConfig":"16"},{"size":3272,"mtime":1610306667256,"results":"24","hashOfConfig":"16"},{"size":1173,"mtime":1609360013773,"results":"25","hashOfConfig":"16"},{"size":343,"mtime":1609360016826,"results":"26","hashOfConfig":"16"},{"size":254,"mtime":1609366304523,"results":"27","hashOfConfig":"16"},{"size":1039,"mtime":1610308233573,"results":"28","hashOfConfig":"16"},{"size":2638,"mtime":1610819221283,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"pbv2es",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"/Users/kevinlee/dev/switch-log/client/src/index.js",[],["63","64"],"/Users/kevinlee/dev/switch-log/client/src/context/UserContext.js",[],"/Users/kevinlee/dev/switch-log/client/src/context/UserStore.js",[],"/Users/kevinlee/dev/switch-log/client/src/routes.js",[],"/Users/kevinlee/dev/switch-log/client/src/containers/RouteContainer.js",[],"/Users/kevinlee/dev/switch-log/client/src/containers/Auth.js",["65"],"import React, { useEffect } from \"react\";\nimport { useUserStore } from \"../context/UserContext\";\nimport { useObserver } from \"mobx-react\";\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport Loading from \"./Loading\";\n\nimport { Magic } from \"magic-sdk\";\nconst magic = new Magic(process.env.REACT_APP_MAGIC_API_KEY);\n\nconst Auth = () => {\n  const userStore = useUserStore();\n  // const [logStatus, setLogStatus] = React.useState(false)\n\n  useEffect(() => {\n    async function authInit() {\n      userStore.setIsLoggedIn(await magic.user.isLoggedIn());\n      if (userStore.isLoggedIn === true) {\n        let userMetadata = await magic.user.getMetadata();\n        console.log(userMetadata);\n        userStore.setEmail(userMetadata.email);\n      }\n    }\n    authInit();\n  }, []);\n\n  return useObserver(() => (\n    <div className=\"home-container\">\n      {userStore.isLoggedIn !== null ? (\n        userStore.isLoggedIn === false ? (\n          <Login />\n        ) : (\n          <div className=\"home-box\">\n            <Home />\n          </div>\n        )\n      ) : (\n        <Loading />\n      )}\n    </div>\n  ));\n};\n\nexport default Auth;\n","/Users/kevinlee/dev/switch-log/client/src/containers/Home.js",[],"/Users/kevinlee/dev/switch-log/client/src/containers/Navbar.js",[],"/Users/kevinlee/dev/switch-log/client/src/containers/Logs.js",["66"],"import React, { useEffect } from \"react\";\nimport { useUserStore } from \"../context/UserContext\";\nimport { useObserver } from \"mobx-react\";\nimport Insight from \"../api/Insight\";\n\nimport { Magic } from \"magic-sdk\";\nimport Loading from \"./Loading\";\nconst magic = new Magic(process.env.REACT_APP_MAGIC_API_KEY);\n\nconst Logs = () => {\n  const userStore = useUserStore();\n  const [did, setDid] = React.useState(null);\n\n  const setMessage = async (e) => {\n    await userStore.updateASenderMessage(\n      e.target.id.split(\"-\")[1],\n      document.getElementById(e.target.id).value\n    );\n    const insight = new Insight(did);\n    insight.updateMessageLogs(userStore.senderMessages);\n  };\n\n  const setIntent = async (e) => {\n    await userStore.updateAIntent(\n      e.target.id.split(\"-\")[1],\n      document.getElementById(e.target.id).value\n    );\n    await userStore.updateAConfidence(e.target.id.split(\"-\")[1], \"n/a\");\n    const insight = new Insight(did);\n    insight.updateMessageLogs(userStore.senderMessages);\n  };\n\n  useEffect(() => {\n    async function logsInit() {\n      let generateIdToken = await magic.user.generateIdToken();\n      setDid(generateIdToken);\n      const insight = new Insight(generateIdToken);\n      let messages = await insight.getMessageLog();\n      await userStore.setSenderMessages(messages.logs);\n    }\n    logsInit();\n  }, []);\n\n  return useObserver(() => (\n    <>\n      {userStore.senderMessages.length > 0 ? (\n        <div className=\"logs-container\">\n          <table className=\"message-table\">\n            <thead className=\"message-table-head\">\n              <tr className=\"message-table-column\">\n                <th className=\"message-table-header\">Message</th>\n                <th className=\"message-table-header\">Intent</th>\n                <th className=\"message-table-header\">Confidence</th>\n                <th className=\"message-table-header\">Timestamp</th>\n              </tr>\n            </thead>\n            <tbody className=\"message-table-body\">\n              {userStore.senderMessages.map((message, index) => (\n                <tr\n                  key={\"senderMessages-\" + index}\n                  className=\"message-table-card\"\n                >\n                  <th className=\"message-table-cell\">\n                    <textarea\n                      className=\"message-table-textarea\"\n                      id={\"senderMessages-\" + index}\n                      key={\"senderMessages-\" + index}\n                      value={message.senderMessage}\n                      onChange={setMessage}\n                    />\n                  </th>\n                  <th className=\"message-table-cell\">\n                    <input\n                      className=\"message-table-input\"\n                      id={\"intent-\" + index}\n                      key={\"intent-\" + index}\n                      value={message.intent}\n                      onChange={setIntent}\n                    />\n                  </th>\n                  <th className=\"message-table-cell\">{message.confidence}</th>\n                  <th className=\"message-table-cell\">{message.timestamp}</th>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </>\n  ));\n};\n\nexport default Logs;\n","/Users/kevinlee/dev/switch-log/client/src/containers/Login.js",[],"/Users/kevinlee/dev/switch-log/client/src/containers/Loading.js",[],"/Users/kevinlee/dev/switch-log/client/src/setupProxy.js",[],"/Users/kevinlee/dev/switch-log/client/src/api/Insight.js",[],["67","68"],"/Users/kevinlee/dev/switch-log/client/src/containers/LifeDesignSummary.js",["69","70","71"],"import React, { useEffect } from \"react\";\nimport { useUserStore } from \"../context/UserContext\";\nimport { useObserver } from \"mobx-react\";\nimport Insight from \"../api/Insight\";\n\nimport { Bar, Doughnut } from \"react-chartjs-2\";\n\nimport { Magic } from \"magic-sdk\";\nimport Loading from \"./Loading\";\nconst magic = new Magic(process.env.REACT_APP_MAGIC_API_KEY);\n\nconst LifeDesignSummary = () => {\n  const userStore = useUserStore();\n  const [did, setDid] = React.useState(null);\n  const [chartData, setChartData] = React.useState({\n    labels: [\"Health\", \"Work\", \"Play\", \"Love\"],\n    datasets: [\n      {\n        label: \"Distribution\",\n        data: [0, 0, 0, 0],\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(255, 206, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  });\n\n  useEffect(() => {\n    async function logsInit() {\n      let generateIdToken = await magic.user.generateIdToken();\n      setDid(generateIdToken);\n      const insight = new Insight(generateIdToken);\n      let summary = await insight.getSummary();\n      await userStore.setTotalHoursLogged(\n        summary.health + summary.work + summary.play + summary.love\n      );\n      await userStore.setLifeDesignSummary(summary);\n      setChartData({\n        ...chartData,\n        datasets: [\n          {\n            label: \"Life Design Summary\",\n            data: [\n              userStore.lifeDesignSummary.health.toFixed(2),\n              userStore.lifeDesignSummary.work.toFixed(2),\n              userStore.lifeDesignSummary.play.toFixed(2),\n              userStore.lifeDesignSummary.love.toFixed(2),\n            ],\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(255, 206, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n            ],\n            borderColor: [\n              \"rgba(255, 99, 132, 1)\",\n              \"rgba(54, 162, 235, 1)\",\n              \"rgba(255, 206, 86, 1)\",\n              \"rgba(75, 192, 192, 1)\",\n            ],\n            borderWidth: 1,\n          },\n        ],\n      });\n    }\n    logsInit();\n  }, []);\n\n  return useObserver(() => (\n    <>\n      {userStore.lifeDesignSummary ? (\n        <div className=\"chart-box\">\n          <Doughnut data={chartData} />\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </>\n  ));\n};\n\nexport default LifeDesignSummary;\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":25,"column":6,"nodeType":"78","endLine":25,"endColumn":8,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"77","line":42,"column":6,"nodeType":"78","endLine":42,"endColumn":8,"suggestions":"80"},{"ruleId":"72","replacedBy":"81"},{"ruleId":"74","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":6,"column":10,"nodeType":"85","messageId":"86","endLine":6,"endColumn":13},{"ruleId":"83","severity":1,"message":"87","line":14,"column":10,"nodeType":"85","messageId":"86","endLine":14,"endColumn":13},{"ruleId":"76","severity":1,"message":"88","line":77,"column":6,"nodeType":"78","endLine":77,"endColumn":8,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userStore'. Either include it or remove the dependency array.","ArrayExpression",["92"],["93"],["90"],["91"],"no-unused-vars","'Bar' is defined but never used.","Identifier","unusedVar","'did' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chartData' and 'userStore'. Either include them or remove the dependency array. You can also do a functional update 'setChartData(c => ...)' if you only need 'chartData' in the 'setChartData' call.",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"95","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [userStore]",{"range":"100","text":"101"},{"range":"102","text":"101"},"Update the dependencies array to be: [chartData, userStore]",{"range":"103","text":"104"},[780,782],"[userStore]",[1348,1350],[2373,2375],"[chartData, userStore]"]